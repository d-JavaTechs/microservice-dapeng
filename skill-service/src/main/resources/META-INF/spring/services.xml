<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:soa="http://soa-springtag.isuwang.com/schema/service" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://soa-springtag.isuwang.com/schema/service
        http://soa-springtag.isuwang.com/schema/service/service.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">
    <!--参数配置-->
    <context:property-placeholder location="classpath:config_testdb.properties" local-override="false"
                                  system-properties-mode="ENVIRONMENT"/>
    <context:component-scan base-package="pn.eric.microservice"/>

    <bean id="skillService" class="pn.eric.microservice.SkillServiceImpl"/>
    <soa:service ref="skillService"/>



    <bean id="slf4j-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <property name="statementExecutableSqlLogEnable" value="true"/>
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="3000"/>
        <property name="logSlowSql" value="true"/>
    </bean>

    <!-- 数据库和事务配置 -->
    <bean id="testDb_dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${DB_PRODUCTDB_URL}"/>
        <property name="username" value="${DB_PRODUCTDB_USER}"/>
        <property name="password" value="${DB_PRODUCTDB_PASSWD}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="50"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <!--
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        -->

        <!-- 配置监控统计拦截的filters -->
        <!--
        <property name="filters" value="stat,slf4j"/>
        -->
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
                <ref bean="slf4j-filter"/>
            </list>
        </property>
    </bean>

    <bean id="transactionManager_dataSource" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="testDb_dataSource"/>
        <property name="defaultTimeout" value="30"/>
        <qualifier value="testDb"/>
    </bean>


    <bean id="cacheSchedulerService" class="pn.eric.microservice.scheduler.CacheSchedulerService"/>

    <tx:annotation-driven transaction-manager="transactionManager_dataSource"/>

    <bean id="druidDataSourceMonitor" class="com.isuwang.dapeng.monitor.druid.DruidDataSourceMonitor" init-method="init" destroy-method="destory"/>


    <task:scheduler id="qbScheduler" pool-size="10" />
    <bean id="productCacheScheduler" class="pn.eric.microservice.scheduler.CacheScheduler" init-method="doUpdate" />
    <task:scheduled-tasks scheduler="qbScheduler">
        <task:scheduled ref="productCacheScheduler" method="doUpdate" cron="0 0/10 * * * ?"/>
    </task:scheduled-tasks>
</beans>